
#include <stdio.h>
#include <stdlib.h>
#include <memory.h>

#if 0
#include "c_header.txt"
#define ENTRY_POINT 0
#define TABLE_WIDTH 0
#define testproject_next(...) ;
static char parser_table[] = {};
#endif

//#define DEBUG_TINYPARSE
#define ALLOCATION_BUFFER 1024

#define FLAG_NOP            0b000000000
#define FLAG_SET            0b000000001
#define FLAG_PUSH_SUB       0b000000010
#define FLAG_CALL           0b000000100
#define FLAG_RETURN         0b000001000
#define FLAG_MARK_TYPE      0b000010000
#define FLAG_MARK_NODE_TYPE 0b000100000
#define FLAG_SET_FLAG       0b001000000
#define FLAG_UNSET_FLAG     0b010000000
#define FLAG_NULL           0b100000000

#define PEEK_QUEUE_SIZE 80

typedef struct _Allocator
{
    MemoryList *memory;
    MemoryList *curr;
    char *ptr;
} Allocator;

static Allocator create_allocator()
{
    Allocator alloc;
    MemoryList *mem = (MemoryList*)malloc(sizeof(MemoryList));

    mem->data = malloc(ALLOCATION_BUFFER);
    mem->next = NULL;
    mem->buffer_size = ALLOCATION_BUFFER;
    alloc.memory = mem;
    alloc.curr = mem;
    alloc.ptr = mem->data;
    return alloc;
}

static void check_buffer_size(
    Allocator *alloc,
    int size)
{
    // Check if there's enough memory available
    while ((alloc->ptr - alloc->curr->data) + size >= alloc->curr->buffer_size)
    {
        MemoryList *mem = (MemoryList*)malloc(sizeof(MemoryList));
        mem->buffer_size = size + ALLOCATION_BUFFER;
        mem->data = (char*)malloc(mem->buffer_size);
        mem->next = NULL;

        alloc->curr->next = mem;
        alloc->curr = mem;
        alloc->ptr = mem->data;
    }
}

static void *push(
    Allocator *alloc, 
    void *data, 
    int size)
{
    void *ptr;

    // Copy memory into allocation buffer   
    check_buffer_size(alloc, size);
    ptr = (void*)alloc->ptr;
    memcpy(ptr, data, size);

    // Find the next space to allocate
    alloc->ptr += size;
    return ptr;
}

static void free_memory_list(
    MemoryList *mem)
{
    if (mem->next != NULL)
        free_memory_list(mem->next);
    
    free(mem->data);
    free(mem);
}

static void free_allocator(
    Allocator *alloc)
{
    free_memory_list(alloc->memory);
}

void DUBUG_TABLE_NAME()
{
    int i, j;

    for (i = 0; i < TABLE_SIZE; i++)
    {
        for (j = 0; j < TABLE_WIDTH; j += 2)
        {
            int to, command;
            const char *name;
            
            to = *(STATE_ID_TYPE*)(parser_table + i * TABLE_WIDTH + j + 0);
            command = parser_table[i * TABLE_WIDTH + j + STATE_ID_SIZE];
            name = type_names[j / STATE_WIDTH];
            if (to != -1)
            {
                printf("%i -%s-> %i (%i)\n", i, name, to, command);
            }
        }
    }
}

#ifdef DEBUG_TINYPARSE

#define PEEK \
    LEXER_NEXT(lex); \
    printf("Push %s, ", look.type_name); \
    peek_queue[peek_queue_end] = look; \
    peek_queue[peek_queue_end+1] = lex->look; \
    peek_queue_end = (peek_queue_end + 2) % PEEK_QUEUE_SIZE; \
    peek_queue_rewind_count += 1; \
    printf("Queue [end=%i, start=%i], ", peek_queue_start, peek_queue_end); \
    look = lex->look; \

#else

#define PEEK \
    LEXER_NEXT(lex); \
    peek_queue[peek_queue_end] = look; \
    peek_queue[peek_queue_end+1] = lex->look; \
    peek_queue_end = (peek_queue_end + 2) % PEEK_QUEUE_SIZE; \
    peek_queue_rewind_count += 1; \
    look = lex->look; \

#endif

Document PARSE_NAME(
    LexerStream *lex)
{
    // State
    int state;
    int next_state, next_commands;
    int next_index, next_type;
    int call_command, value_stack_pointer;
    int ignore_flag;
    int use_peek;

    // Lexer
    int eof_flag;
    Token look;
    Token peek_queue[PEEK_QUEUE_SIZE];
    int peek_queue_start;
    int peek_queue_end;
    int peek_queue_rewind_count;

    // Stacks
    Allocator alloc;
    char *value;
    int *call_stack;
    int call_stack_pointer;
    int value_pointer;

    state = ENTRY_POINT;
    call_stack_pointer = 2;
    call_stack = malloc(sizeof(int) * 1024);
    call_stack[0] = 0;              // Return state
    call_stack[1] = 0;              // Value pointer
    alloc = create_allocator();
    value_pointer = 0;
    value = malloc(1024);
    peek_queue_start = 0;
    peek_queue_end = 0;
    peek_queue_rewind_count = 0;

    look = lex->look;
    eof_flag = lex->eof_flag;
    for (;;)
    {
        // Get next state
        next_type = eof_flag ? EOF_TYPE : look.type;
        next_index = state * TABLE_WIDTH + next_type * STATE_WIDTH;
        next_state = *(STATE_ID_TYPE*)(parser_table + next_index); 
        next_commands = parser_table[next_index + STATE_ID_SIZE];

#ifdef DEBUG_TINYPARSE
        printf("%i -- %s(%i) --> %i ( %i ", state, 
            look.type_name, look.type, next_state, next_commands);
#endif

        // Execute command and go to the next state
        ignore_flag = 0;
        use_peek = 0;
        state = next_state;
        EXEC_COMMAND(next_commands);

        // There was a syntax error
        if (state == -1)
        {
            lexer_error(lex, lex->look, 
                "Unexpected token");
            LEXER_NEXT(lex);

            break;
        }

        if (!ignore_flag || peek_queue_rewind_count > 0)
        {
            if (peek_queue_end != peek_queue_start)
            {
                if (!use_peek)
                {
                    look = peek_queue[peek_queue_start];
                    peek_queue_start = (peek_queue_start + 1) % PEEK_QUEUE_SIZE;

                    if (peek_queue_rewind_count > 0)
                        peek_queue_rewind_count -= 1;

#ifdef DEBUG_TINYPARSE
                    printf("Pop %s, ", look.type_name);
#endif
                }
            }
            else
            {
                LEXER_NEXT(lex);
                eof_flag = lex->eof_flag;
                look = lex->look;
            }
        }
#ifdef DEBUG_TINYPARSE
        else printf("ignore ");
        printf(")\n");
#endif

        // If a return command has been called in the 
        // outer most scope, this is an accepting state
        if (call_stack_pointer <= 0)
            break;
    }
    free(call_stack);

    Document doc;
    doc.memory = alloc.memory;
    doc.root = value;
    return doc;
}

void FREE_DOCUMENT_NAME(
    Document *doc)
{
    free_memory_list(doc->memory);
    free(doc->root);
}

const char *TYPE_NAME_NAME(int type)
{
    if (type < PARSER_TOKEN_COUNT)
    {
        if (type == EOF_TYPE)
            return "EOF";
        
        return type_names[type];
    }

    return node_name[type - PARSER_TOKEN_COUNT];
}

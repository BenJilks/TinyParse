
#include <stdio.h>
#include <stdlib.h>
#include <memory.h>

#if 0
#include "c_header.txt"
#define ENTRY_POINT 0
#define TABLE_WIDTH 0
#define testproject_next(...) ;
static char parser_table[] = {};
#endif

//#define DEBUG_TINYPARSE
#define STATE_WIDTH 2
#define ALLOCATION_BUFFER 1024

#define FLAG_NOP            0b000000000
#define FLAG_SET            0b000000001
#define FLAG_PUSH_SUB       0b000000010
#define FLAG_CALL           0b000000100
#define FLAG_RETURN         0b000001000
#define FLAG_MARK_TYPE      0b000010000
#define FLAG_MARK_NODE_TYPE 0b000100000
#define FLAG_SET_FLAG       0b001000000
#define FLAG_UNSET_FLAG     0b010000000
#define FLAG_NULL           0b100000000

typedef struct _Allocator
{
    MemoryList *memory;
    MemoryList *curr;
    char *ptr;
} Allocator;

static Allocator create_allocator()
{
    Allocator alloc;
    MemoryList *mem = (MemoryList*)malloc(sizeof(MemoryList));

    mem->data = malloc(ALLOCATION_BUFFER);
    mem->next = NULL;
    mem->buffer_size = ALLOCATION_BUFFER;
    alloc.memory = mem;
    alloc.curr = mem;
    alloc.ptr = mem->data;
    return alloc;
}

static void check_buffer_size(
    Allocator *alloc,
    int size)
{
    // Check if there's enough memory available
    while ((alloc->ptr - alloc->curr->data) + size >= alloc->curr->buffer_size)
    {
        MemoryList *mem = (MemoryList*)malloc(sizeof(MemoryList));
        mem->buffer_size = size + ALLOCATION_BUFFER;
        mem->data = (char*)malloc(mem->buffer_size);
        mem->next = NULL;

        alloc->curr->next = mem;
        alloc->curr = mem;
        alloc->ptr = mem->data;
    }
}

static void *push(
    Allocator *alloc, 
    void *data, 
    int size)
{
    void *ptr;

    // Copy memory into allocation buffer   
    check_buffer_size(alloc, size);
    ptr = (void*)alloc->ptr;
    memcpy(ptr, data, size);

    // Find the next space to allocate
    alloc->ptr += size;
    return ptr;
}

static void free_memory_list(
    MemoryList *mem)
{
    if (mem->next != NULL)
        free_memory_list(mem->next);
    
    free(mem->data);
    free(mem);
}

static void free_allocator(
    Allocator *alloc)
{
    free_memory_list(alloc->memory);
}

void DUBUG_TABLE_NAME()
{
    int i, j;

    for (i = 0; i < TABLE_SIZE; i++)
    {
        for (j = 0; j < TABLE_WIDTH; j += 2)
        {
            int to, command;
            const char *name;
            
            to = parser_table[i * TABLE_WIDTH + j + 0];
            command = parser_table[i * TABLE_WIDTH + j + 1];
            name = type_names[j / 2];
            if (to != -1)
            {
                printf("%i -%s-> %i (%i)\n", i, name, to, command);
            }
        }
    }
}

Document PARSE_NAME(
    LexerStream *lex)
{
    // State
    int state;
    int next_state, next_commands;
    int next_index, next_type;
    int call_command, value_stack_pointer;
    int ignore_flag;

    // Stacks
    Allocator alloc;
    char *value;
    int *call_stack;
    int call_stack_pointer;
    int value_pointer;

    state = ENTRY_POINT;
    call_stack_pointer = 2;
    call_stack = malloc(sizeof(int) * 1024);
    call_stack[0] = 0;              // Return state
    call_stack[1] = 0;              // Value pointer
    alloc = create_allocator();
    value_pointer = 0;
    value = malloc(1024);

    for (;;)
    {
        // Get next state
        next_type = lex->eof_flag ? EOF_TYPE : lex->look.type;
        next_index = state * TABLE_WIDTH + next_type * STATE_WIDTH;
        next_state = parser_table[next_index];
        next_commands = parser_table[next_index + 1];

#ifdef DEBUG_TINYPARSE
        printf("%i -- %s(%i) --> %i ( %i ", state, 
            lex->look.type_name, lex->look.type, next_state, next_commands);
#endif

        // There was a syntax error
        if (next_state == -1)
        {
            lexer_error(lex, lex->look, 
                "Unexpected token");
            LEXER_NEXT(lex);

            break;
        }

        // Execute command and go to the next state
        ignore_flag = 0;
        state = next_state;
        EXEC_COMMAND(next_commands);
        if (!ignore_flag) LEXER_NEXT(lex);
#ifdef DEBUG_TINYPARSE
        else printf("ignore ");
        printf(")\n");
#endif

        // If a return command has been called in the 
        // outer most scope, this is an accepting state
        if (call_stack_pointer <= 0)
            break;
    }
    free(call_stack);

    Document doc;
    doc.memory = alloc.memory;
    doc.root = value;
    return doc;
}

void FREE_DOCUMENT_NAME(
    Document *doc)
{
    free_memory_list(doc->memory);
    free(doc->root);
}

const char *TYPE_NAME_NAME(int type)
{
    if (type < PARSER_TOKEN_COUNT)
    {
        if (type == EOF_TYPE)
            return "EOF";
        
        return type_names[type];
    }

    return node_name[type - PARSER_TOKEN_COUNT];
}
